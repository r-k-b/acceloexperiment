swagger: "2.0"

info:
  version: 1.0.0
  title: acceloexperiment
  description: Let's see if this stays more up-to-date than [the official docs.](https://affinitylive.jira.com/wiki/display/APIS/Accelo+API)
  termsOfService: http://swagger.io/terms/
  contact:
    name: Robert K. Bell
    email: robert@bigbluedigital.com.au
    url: https://github.com/r-k-b/acceloexperiment
  license:
    name: GPL
    url: https://github.com/r-k-b/acceloexperiment/blob/master/LICENSE

host: YOURDEPLOYMENTNAME.api.accelo.com

basePath: /api/v0

schemes:
  - https

consumes:
  - application/json

produces:
  - application/json
  - text/xml
  - text/x-yaml

parameters:
  id:
    name: id
    in: path
    required: true
    type: integer
    format: int64
    
  profileFieldId:
    name: profileFieldId
    in: path
    required: true
    type: integer
    format: int64
    
  profileValueId: # is this actually different from `profileFieldId`?
    name: profileValueId
    in: path
    required: true
    type: integer
    format: int64
    
  progressionId:
    name: progressionId
    in: path
    required: true
    type: integer
    format: int64

  objectType:
    name: object_type
    in: path
    description: foo
    required: true
    type: string
    # todo: enums for object_type
    # enum:
    #  - foo
    #  - bar

  objectId:
    name: object_id
    in: path
    description: foo
    required: true
    type: integer
    format: int64

  page:
    name: _page
    in: query
    description: The page of the list to display. For example, 5 will display the fifth page. Each page contains 10 resources.
    required: false
    type: integer

  limit:
    name: _limit
    in: query
    description: The maximum number of items to return.
    required: false
    type: integer
    default: 10
    maximum: 50

  offset:
    name: _offset
    in: query
    description: |
      The position in the list of resources to return from.
      For example, if you had 20 resources and requested an offset of 10. Resources 10 to 19 would be returned.
      Offset cannot be used in conjunction with _page.
    required: false
    type: integer
    default: 0

  activityFields:
    name: _fields
    in: query
    description: Allows you to specify optional fields and linked objects to include in the response.
    required: false
    type: array
    items:
      type: string
      collectionFormat: csv
      # what, no allowMultiple?
      enum:
      - id
      - subject
      - parent
      - parent_id
      - thread
      - thread_id
      - against
      - against_type
      - against_id
      - owner
      - owner_type
      - owner_id
      - medium
      - body
      - visibility
      - details
      - message_id
      - date_created
      - date_started
      - date_logged
      - date_ended
      - date_due
      - date_modified
      - staff
      - rate
      - rate_charged
      - 'class'
      - class_id
      - task
      - interacts
      - nonbillable
      - billable
      - task_id
      - priority
      - priority_id

  activityFilters:
    name: _filters
    in: query
    description: You can filter the returned list using the _filters parameter.
    required: false
    type: array
    items:
      type: string
      collectionFormat: csv
      # what, no allowMultiple?
      enum:
      - owner_type
      - type
      - invitation
      - read # eg: `read(no)` or `read(0)` or `read(n)`
      - parent_id
      - thread_id
      - staff_id
      - priority_id
      - class_id
      - task_id
      - message_id
      - owner_id
      - visibility
      - medium
      - against_type # eg: `against_type(company,job)`. Only return activities against the given type.
      - against_id # eg: `against_id(12,12)`. Only return activities against object with given ids.
      - order_by_asc # eg: order_by_asc(date_ended). Enums: date_started, date_created, date_ended, date_logged, date_modified, billable, nonbillable.
      - order_by_desc # Same as order_by_asc but opposite direction
      - date_created_before
      - date_created_after
      - date_started_before
      - date_started_after
      - date_logged_before
      - date_logged_after
      - date_ended_before
      - date_ended_after
      - date_modified_before
      - date_modified_after
      - max_id
      - min_id
      - <field_name>_greater_than(<value>),
      - <field_name>_less_than(<value>),
      - <field_name>_greater_than_or_equal(<value>),
      - <field_name>_less_than_or_equal(<value>) # eg: `_filters=id_greater_than(5)`
      # Enum for `<field_name>`:
      # - id
      # - thread
      # - against_id
      # - owner
      # - staff
      # - priority
      # - class
      # - task

  objectBudgetFields:
    name: _fields
    in: query
    description: Allows you to specify optional fields and linked objects to include in the response.
    required: false
    type: array
    items:
      type: string
      collectionFormat: csv
      # what, no allowMultiple?
      enum:
      - object_table
      - object_id or object
      - is_billable
      - service_time
      - service_price
      - service_price_subtotal
      - expense_price
      - material_price
      - billable
      - nonbillable
      - logged
      - charged
      - service_time_estimate
      - service_time_subtotal_estimate
      - service_price_estimate
      - service_price_subtotal_estimate
      - remaining_subtotal
      - billable_subtotal
      - nonbillable_subtotal
      - logged_subtotal
      - charged_subtotal

paths:
  /activities:
    get:
      description: |
        Returns an array of Activities.
      operationId: list activities
      externalDocs:
        description: Official documentation.
        url: https://affinitylive.jira.com/wiki/display/APIS/List+Activities
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
        - $ref: "#/parameters/activityFields"
        - $ref: "#/parameters/activityFilters"
      responses:
        200:
          description: activityListResponse
          schema:
            $ref: '#/definitions/activityListResponse'

  /activities/count:
    get:
      description: Total number of activities.
      responses:
        200:
          description: Example response TBA

  /activities/{id}:
    get:
      description: Specific activity identified by its id.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

    put:
      description: Update an activity.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

    delete:
      description: Remove an activity.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA


  /activities/{id}/interacts:
    get:
      description: Recipients against a given activity.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

  /activities/{id}/interacts/count:
    get:
      description: Count the number of recipients against an activity.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

  /activities/allocations:
    get:
      description: Allocation (billable & non-billable) information for a selected group of activities.
      responses:
        200:
          description: Example response TBA

  /addresses:
    get:
      description: Returns a list of addresses.
      responses:
        200:
          description: Example response TBA
    post:
      description: Creates a new address and returns it.
      responses:
        200:
          description: Example response TBA

  /{object_type}/{object_id}/addresses:
    get:
      description: Returns a list of addresses by a given object.
      parameters:
        - $ref: "#/parameters/objectType"
        - $ref: "#/parameters/objectId"
      responses:
        200:
          description: Example response TBA
    post:
      description: Creates a new address against a given object and returns it.
      parameters:
        - $ref: "#/parameters/objectType"
        - $ref: "#/parameters/objectId"
      responses:
        200:
          description: Example response TBA

  /addresses/{id}:
    get:
      description: Returns an address identified with address_id
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA
    put:
      description: Updates and returns an addresses identified by id.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

  /addresses/count:
    get:
      description: Returns the number of addresses found in system.
      responses:
        200:
          description: Example response TBA

  /affiliations:
    get:
      description: Returns a list of Affiliations.
      responses:
        200:
          description: Example response TBA
    post:
      description: Creates a new affiliation.
      responses:
        200:
          description: Example response TBA

  /affiliations/count:
    get:
      description: Returns the total number of affiliations.
      responses:
        200:
          description: Example response TBA

  /affiliations/newest:
    get:
      description: Returns a list of affiliations ordered by date_modified descending.
      responses:
        200:
          description: Example response TBA

  /affiliations/{id}:
    get:
      description: Returns an affiliation identified by its id.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA
    post:
      description: Updates an affiliation identified by its id.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA
    delete:
      description: Removes an affiliation identified by its id.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

  /affiliations/{id}/status:
    get:
      description: Returns an affiliation's status.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

  /affiliations/{id}/profiles/fields/{profileFieldId}:
    post:
      description: Creates a profile value for an affiliation.
      parameters:
        - $ref: "#/parameters/id"
        - $ref: "#/parameters/profileFieldId"
      responses:
        200:
          description: Example response TBA

  /affiliations/{id}/profiles/values:
    get:
      description: Returns an array of profile values for the affiliation.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

  /affiliations/{id}/profiles/values/{profileValueId}:
    put:
      description: Update an existing profile value for the affiliation.
      parameters:
        - $ref: "#/parameters/id"
        - $ref: "#/parameters/profileValueId"
      responses:
        200:
          description: Example response TBA

  /affiliations/{id}/progressions:
    get:
      description: Returns an array of available progressions for the affiliation.
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: Example response TBA

  /affiliations/{id}/progressions/{progressionId}/auto:
    put:
      description: Runs a status update for the given progression on the given affiliation.
      parameters:
        - $ref: "#/parameters/id"
        - $ref: "#/parameters/progressionId"
      responses:
        200:
          description: Example response TBA
    post:
      description: Runs a status update for the given progression on the given affiliation.
      parameters:
        - $ref: "#/parameters/id"
        - $ref: "#/parameters/progressionId"
      responses:
        200:
          description: Example response TBA

  /affiliations/profiles/fields:
    get:
      description: Returns an array of profile fields for affiliation.
      responses:
        200:
          description: Example response TBA

  /object_budgets:
    get:
      description: |
        Returns an array of objectBudgets.

        ⚠ Object budgets were introduced with the projects upgrade and are different from
        [the standard budgets.](https://affinitylive.jira.com/wiki/display/APIS/Budgets)
      operationId: findObjectBudgets
      externalDocs:
        description: Official documentation.
        url: https://affinitylive.jira.com/wiki/display/APIS/GET+object_budgets
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
        - $ref: "#/parameters/objectBudgetFields"
      responses:
        200:
          description: objectBudgetListResponse
          schema:
            $ref: '#/definitions/objectBudgetListResponse'

  /object_budgets/{id}:
    get:
      description: Find an object budget by its ID.
      operationId: find objectBudget by id
      parameters:
        - name: id
          in: path
          description: ID of objectBudget
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: objectBudget response
          schema:
            $ref: '#/definitions/objectBudgetResponse'

  /object_budgets/count:
    get:
      description: Returns the number of object budgets on the deployment.
      operationId: count all objectBudgets
      responses:
        200:
          description: count all objectBudgets response
          schema:
            $ref: '#/definitions/objectBudgetCountResponse'
  
  /staff/whoami:
    get:
      description: Returns basic info about the current user.
      responses:
        200:
          description: Return staff ID, first name, last name.
          examples:
            meta:
              message: Everything executed as expected.
              more_info: https://affinitylive.jira.com/wiki/display/APIS/Status+Codes#ok
              status: ok
            response:
              firstname: Robert
              id: '23'
              surname: Bell
  
  /tokeninfo:
    get:
      description: Returns info about the access token used to access this endpoint.
      responses:
        200:
          description: Return token info.
          examples:
            meta:
              message: Everything executed as expected.
              more_info: https://affinitylive.jira.com/wiki/display/APIS/Status+Codes#ok
              status: ok
            response:
              deployment: example
              email: Robert@example.com
              expiry_date: '1412345678'
              firstname: Robert
              locale:
                currency:
                  symbol: "$"
                timezone: Australia/Sydney
              staff_id: '23'
              surname: Bell
  
  /user:
    get:
      description: Returns detailed info about the current user.
      responses:
        200:
          description: Return detailed user info.
          examples:
            meta:
              message: Everything executed as expected.
              more_info: https://affinitylive.jira.com/wiki/display/APIS/Status+Codes#ok
              status: ok
            response:
              email: Robert@example.com
              fax: ''
              financial_level: all
              firstname: Robert
              id: '23'
              locale:
                currency:
                  symbol: "$"
                timezone: "Australia/Sydney"
              mobile: "+61234567890"
              phone: "09 1234 5678"
              position: Developer
              surname: Bell
              timezone: "Australia/Sydney"
              title: 
              user_access:
                account_invoice:
                  add: 1
                  admin: 1
                  dashboard: ''
                  manages: 0
                  view: 1
                activity:
                  add: 1
                  admin: 1
                  dashboard: 1
                  manages: 0
                  view: 1
              user_titles:
                account_invoice:
                  plural: Invoices
                  singular: Invoice
                account_purchase:
                  plural: Purchases
                  singular: Purchase
              username: robert@example.com

definitions:

  Response:
    type: object
    description: Default API response
    required:
      - meta
      - response
    properties:
      meta:
        type: object
        required:
          - status
          - message
        properties:
          status:
            description: Response status `ok` or ...?
            type: string
            enum: ["ok", "error"]
          message:
            description: A longer explanation of the result.
            type: string
      response:
        description: Result body
        type: ["object", "null"]
    example:
      response:
        foo: "bar"
      meta:
        status: "ok"
        message: "Everything executed as expected."

  activity:
    properties:
      id:
        type: number
        format: int
        description: A unique id assigned to the object budget
      subject:
        type: string
    required:
      - id
      - subject

  activityListResponse:
    description: activity list response
    allOf:
      - $ref: '#/definitions/Response'
      - properties:
          response:
            type: array
            items:
              $ref: '#/definitions/activity'
        required:
          - response
  #   example:
  #     response:
  #       count: "32432"
  #     meta:
  #       status: "ok"
  #       message: "Everything executed as expected."

  objectBudget:
    properties:
      id:
        type: number
        format: int
        description: A unique id assigned to the object budget
      object_table:
        type: number
        format: string
        description: Name of the table the object budget is against. e.g, milestone
      object_id or object:
        type: number
        format: int
        description: The unique identifier assigned to the object the budget belongs to.
      is_billable:
        type: number
        format: string
        description: yes or no
      service_time:
        type: number
        format: int
      service_price:
        type: number
        format: double
      service_price_subtotal:
        type: number
        format: double
      expense_price:
        type: number
        format: double
      material_price:
        type: number
        format: double
      billable:
        type: number
        format: int
      nonbillable:
        type: number
        format: int
      logged:
        type: number
        format: int
        description: Total of billable and nonbillable
      charged:
        type: number
        format: double
      service_time_estimate:
        type: number
        format: int
      service_time_subtotal_estimate:
        type: number
        format: int
      service_price_estimate:
        type: number
        format: double
      service_price_subtotal_estimate:
        type: number
        format: double
      remaining_subtotal:
        type: number
        format: int
      billable_subtotal:
        type: number
        format: int
      nonbillable_subtotal:
        type: number
        format: int
      logged_subtotal:
        type: number
        format: int
        description: Total of billable and nonbillable subtotal.
      charged_subtotal:
        type: number
        format: double

  objectBudgetResponse:
    description: objectBudgetCountResponse
    allOf:
      - $ref: '#/definitions/Response'
      - properties:
          response:
            $ref: '#/definitions/objectBudget'
        required:
          - response
    # example:
    #   response:
    #     count: "32432"
    #   meta:
    #     status: "ok"
    #     message: "Everything executed as expected."

  objectBudgetListResponse:
    description: objectBudgetCountResponse
    allOf:
      - $ref: '#/definitions/Response'
      - properties:
          response:
            type: array
            items:
              $ref: '#/definitions/objectBudget'
        required:
          - response
  #   example:
  #     response:
  #       count: "32432"
  #     meta:
  #       status: "ok"
  #       message: "Everything executed as expected."

  objectBudgetCountResponse:
    description: objectBudgetCountResponse
    allOf:
      - $ref: '#/definitions/Response'
      - properties:
          response:
            type: object
            properties:
              count:
                description: The docs say it's an int, but it returns a string...
                type: string
            required:
              - count
        required:
          - response
    example:
      response:
        count: "32432"
      meta:
        status: "ok"
        message: "Everything executed as expected."